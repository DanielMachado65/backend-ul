import { AggregateVo } from 'src/domain/value-object/aggregate.vo';
import { NationalBaseVo } from 'src/domain/value-object/national-base.vo';
import { QueryAggregateVo } from 'src/domain/value-object/query/query-aggregate.vo';
import { StateBaseVo } from 'src/domain/value-object/state-base.vo';
import { AggregateParser } from 'src/infrastructure/service/query/parser/aggregate-parser';

const mockAggregateVo = (): AggregateVo => ({
  assemblyType: 'any_assembly_type',
  axesQuantity: 4,
  billingDocument: 'any_billing_document',
  billingDocumentType: 'any_billing_document_type',
  brand: 'any_brand',
  brandCode: 111,
  carBodyNumber: '12312',
  carBodyType: 'any_car_body_type',
  chassis: 'any_chassis',
  chassisSituation: 'any_chasis_situation',
  city: 'any_city',
  cityCode: 123212,
  engineCapacity: 'any_engine_capacity',
  engineNumber: '123123211',
  exchangeBox: 'any_exchange_box',
  family: 'any_family',
  fuel: 'any_fuel',
  fuelCode: 1121311,
  importDoc: 'any_import_doc',
  importDocType: 'any_import_doc_type',
  lastInclusionDate: new Date(),
  lastUpdateDate: new Date(),
  licencePlateDate: new Date().toLocaleString(),
  loadCapacity: 'any_load_capacity',
  manufactureYear: 2021,
  maxTractionCapacity: 'max traction capacity',
  model: 'any_model',
  modelBrand: 'any_model_brand',
  modelBrandCode: 2332,
  modelYear: 2022,
  nationality: 'any_nationality',
  origin: 'any_origin',
  ownerDoc: 'any_owner_doc',
  passengerCapacity: 5,
  plate: 'any_plate',
  potency: 'any_potency',
  rearAxleDif: 'any_rear_axl_dif',
  renavam: 'any_renavam',
  thirdAxisNumber: 12,
  totalGrossWeight: 123,
  uf: 'any_uf',
  ufBilled: 'any_uf_billed',
  updateDate: null,
  vehicleColor: 'any_vehicle_color',
  vehicleSituation: 'any_vehicle_situation',
  vehicleSpecies: 'any_species',
  vehicleType: 'any_type',
});

const mockNationalBaseVo = (): NationalBaseVo => ({
  plate: 'any_plate',
  chassis: 'any_chassis',
  renavam: 'any_renavam',
  engineNumber: 'any_engine_number',
  transmissionNumber: 'any_transmission_number',
  bodyNumber: 'any_body_number',
  bodyType: 'any_body_type',
  rearAxisNumber: 'any_rear_axis_number',
  thireAxisNumber: 'any_thire_axis_number',
  axis: 'any_axis',
  enginePower: 'any_engine_power',
  modelYear: 2022,
  manufactureYear: 2021,
  vehicleSpecie: 'any_vehicle_specie',
  vehicleType: 'any_vehicle_type',
  vehicleSituation: 'any_vehicle_situation',
  city: 'any_city',
  uf: 'any_uf',
  ufBilled: 'any_uf_billed',
  billedDocType: 'any_billed_doc_type',
  importDocType: 'any_import_doc_type',
  di: 'any_di',
  loadCapacity: 'any_load_capacity',
  cmt: 'any_cmt',
  pbt: 'any_pbt',
  docBilled: 'any_doc_billed',
  color: 'any_color',
  species: 'any_species',
  chassisBrandType: 'any_chassis_brand_type',
  category: 'any_category',
  fuel: 'any_fuel',
  ownerDoc: 'any_owner_doc',
  cylinder: 'any_cylinder',
  modelCode: 'any_model_code',
  brand: 'any_brand',
  model: 'any_model',
  provenance: 'any_provenance',
  brandModel: 'any_brand_model',
  licensePlateDate: new Date(),
  mountingType: 'any_mounting_type',
  loadPassengers: 5,
  lastUpdateDate: new Date(),
  inclusionRestrictionDate: new Date(),
  dateOfTheLicense: new Date(),
  taxRestrictionDate: new Date(),
  restrictions: {
    restriction1: {
      description: 'description_restriction1',
      name: 'name_restriction1',
      value: 123,
    },
    restriction2: {
      description: 'description_restriction2',
      name: 'name_restriction2',
      value: 123,
    },
    restriction3: {
      description: 'description_restriction3',
      name: 'name_restriction3',
      value: 123,
    },
    restriction4: {
      description: 'description_restriction4',
      name: 'name_restriction4',
      value: 123,
    },
    othersRestrictions1: {
      description: 'description_others_restrictions1',
      name: 'name_others_restrictions1',
      value: 123,
    },
    othersRestrictions2: {
      description: 'description_others_restrictions2',
      name: 'name_others_restrictions2',
      value: 123,
    },
    othersRestrictions3: {
      description: 'description_others_restrictions3',
      name: 'name_others_restrictions3',
      value: 123,
    },
    othersRestrictions4: {
      description: 'description_others_restrictions4',
      name: 'name_others_restrictions4',
      value: 123,
    },
    othersRestrictions5: {
      description: 'description_others_restrictions5',
      name: 'name_others_restrictions5',
      value: 123,
    },
    othersRestrictions6: {
      description: 'description_others_restrictions6',
      name: 'name_others_restrictions6',
      value: 123,
    },
    othersRestrictions7: {
      description: 'description_others_restrictions7',
      name: 'name_others_restrictions7',
      value: 123,
    },
    othersRestrictions8: {
      description: 'description_others_restrictions8',
      name: 'name_others_restrictions8',
      value: 123,
    },
    occurrenceTheft: {
      description: 'description_occurrence_theft',
      name: 'name_occurrence_theft',
      value: 123,
    },
    importation: {
      description: 'description_importation',
      name: 'name_importation',
      value: 123,
    },
    salesCommunication: {
      description: 'description_sales_communication',
      name: 'name_sales_communication',
      value: 123,
    },
    restrictionsRenajud: {
      description: 'description_restrictions_renajud',
      name: 'name_restrictions_renajud',
      value: 123,
    },
    restrictionsFinan: {
      description: 'description_restrictions_finan',
      name: 'name_restrictions_finan',
      value: 123,
    },
    restrictionsAgentName: {
      description: 'description_restrictions_agent_name',
      name: 'name_restrictions_agent_name',
      value: 123,
    },
    restrictionsFinanced: {
      description: 'description_restrictions_financed',
      name: 'name_restrictions_financed',
      value: 123,
    },
    cpfCnpjFinanced: {
      description: 'description_cpf_cnpj_financed',
      name: 'name_cpf_cnpj_financed',
      value: 123,
    },
    occurrence: {
      description: 'description_occurrence',
      name: 'name_occurrence',
      value: 123,
    },
    restrictions: {
      description: 'description_restrictions',
      name: 'name_restrictions',
      value: 123,
    },
    restrictionsJudicial: {
      description: 'description_restrictions_judicial',
      name: 'name_restrictions_judicial',
      value: 123,
    },
  },
});

const mockStateBaseVo = (): StateBaseVo => ({
  plate: 'any_plate',
  ownerName: 'any_owner_name',
  comments: 'any_comments',
  dateValidityFinancialContract: new Date(),
  intentionDocFinance: 'any_intention_doc_finance',
  licdata: new Date(),
  licensingExercise: 'any_licensing_exercise',
  ownerDocumentType: 'any_owner_document_type',
  previousOwnerName: 'any_previous_owner_name',
  previousPlate: 'any_previous_plate',
  shielding: 'any_shielding',
  taxRestrictionLimitDate: new Date(),
  tenantRestriction: 'any_tenant_restriction',
  transmissionCRVDate: new Date(),
  chassis: 'any_chassis',
  renavam: 'any_renavam',
  engineNumber: 'any_engine_number',
  transmissionNumber: 'any_transmission_number',
  bodyNumber: 'any_body_number',
  bodyType: 'any_body_type',
  rearAxisNumber: 'any_rear_axis_number',
  thireAxisNumber: 'any_thire_axis_number',
  axis: 'any_axis',
  enginePower: 'any_engine_power',
  modelYear: 2022,
  manufactureYear: 2021,
  vehicleSpecie: 'any_vehicle_specie',
  vehicleType: 'any_vehicle_type',
  vehicleSituation: 'any_vehicle_situation',
  city: 'any_city',
  uf: 'any_uf',
  loadCapacity: 'any_load_capacity',
  cmt: 'any_cmt',
  pbt: 'any_pbt',
  color: 'any_color',
  chassisBrandType: 'any_chassis_brand_type',
  category: 'any_category',
  fuel: 'any_fuel',
  cylinder: 'any_cylinder',
  modelCode: 'any_model_code',
  model: 'any_model',
  provenance: 'any_provenance',
  brandModel: 'any_brand_model',
  loadPassengers: 5,
  lastUpdateDate: new Date(),
  inclusionRestrictionDate: new Date(),
  restrictions: {
    winchBlockade: {
      description: 'description_winch_blockade',
      name: 'name_winch_blockade',
      value: 2132,
    },
    restrictionsTheft: {
      description: 'description_restrictions_theft',
      name: 'name_restrictions_theft',
      value: 2132,
    },
    restrictionsEnvironmental: {
      description: 'description_restrictions_environmental',
      name: 'name_restrictions_environmental',
      value: 2132,
    },
    restrictionsJudicial: {
      description: 'description_restrictions_judicial',
      name: 'name_restrictions_judicial',
      value: 2132,
    },
    restrictionsRenajud: {
      description: 'description_restrictions_renajud',
      name: 'name_restrictions_renajud',
      value: 2132,
    },
    restrictionsTaxation: {
      description: 'description_restrictions_taxation',
      name: 'name_restrictions_taxation',
      value: 2132,
    },
    restrictions: {
      description: 'description_restrictions',
      name: 'name_restrictions',
      value: 2132,
    },
    restrictionsFinancial: {
      description: 'description_restrictions_financial',
      name: 'name_restrictions_financial',
      value: 2132,
    },
    debtDpvat: {
      description: 'description_debt_dpvat',
      name: 'name_debt_dpvat',
      value: 2132,
    },
    debtIpva: {
      description: 'description_debt_ipva',
      name: 'name_debt_ipva',
      value: 2132,
    },
    debtLicensing: {
      description: 'description_debt_licensing',
      name: 'name_debt_licensing',
      value: 2132,
    },
    debtTheft: {
      description: 'description_debt_theft',
      name: 'name_debt_theft',
      value: 2132,
    },
    restrictionsFinan: {
      description: 'description_restrictions_finan',
      name: 'name_restrictions_finan',
      value: 2132,
    },
    restrictionsArrenadatario: {
      description: 'description_restrictions_arrenadatario',
      name: 'name_restrictions_arrenadatario',
      value: 2132,
    },
    restrictionsAgentName: {
      description: 'description_restrictions_agent_name',
      name: 'name_restrictions_agent_name',
      value: 2132,
    },
    othersRestrictions1: {
      description: 'description_others_restrictions1',
      name: 'name_others_restrictions1',
      value: 2132,
    },
    othersRestrictions2: {
      description: 'description_others_restrictions2',
      name: 'name_others_restrictions2',
      value: 2132,
    },
    othersRestrictions3: {
      description: 'description_others_restrictions3',
      name: 'name_others_restrictions3',
      value: 2132,
    },
    othersRestrictions4: {
      description: 'description_others_restrictions4',
      name: 'name_others_restrictions4',
      value: 2132,
    },
    administavive: {
      description: 'description_administavive',
      name: 'name_administavive',
      value: 2132,
    },
    cpfCnpjArrenadatar: {
      description: 'description_cpf_cnpj_arrenadatar',
      name: 'name_cpf_cnpj_arrenadatar',
      value: 2132,
    },
    debtDersa: {
      description: 'description_debt_dersa',
      name: 'name_debt_dersa',
      value: 2132,
    },
    debtDer: {
      description: 'description_debt_der',
      name: 'name_debt_der',
      value: 2132,
    },
    debtDetran: {
      description: 'description_debt_detran',
      name: 'name_debt_detran',
      value: 2132,
    },
    debtCetesb: {
      description: 'description_debt_cetesb',
      name: 'name_debt_cetesb',
      value: 2132,
    },
    debtRenainf: {
      description: 'description_debt_renainf',
      name: 'name_debt_renainf',
      value: 2132,
    },
    debtPolrodfed: {
      description: 'description_debt_polrodfed',
      name: 'name_debt_polrodfed',
      value: 2132,
    },
    intentionRestrictionFinan: {
      description: 'description_intention_restriction_finan',
      name: 'name_intention_restriction_finan',
      value: 2132,
    },
    intentionAgentName: {
      description: 'description_intention_agent_name',
      name: 'name_intention_agent_name',
      value: 2132,
    },
    intentionFinancName: {
      description: 'description_intention_financ_name',
      name: 'name_intention_financ_name',
      value: 2132,
    },
    intentionInclusionDate: {
      description: 'description_intention_inclusion_date',
      name: 'name_intention_inclusion_date',
      value: 2132,
    },
    financialInclusionDate: {
      description: 'description_financial_inclusion_date',
      name: 'name_financial_inclusion_date',
      value: 2132,
    },
    salesCommunication: {
      description: 'description_sales_communication',
      name: 'name_sales_communication',
      value: 2132,
    },
    communicationInclusion: {
      description: 'description_communication_inclusion',
      name: 'name_communication_inclusion',
      value: 2132,
    },
    financialContract: {
      description: 'description_financial_contract',
      name: 'name_financial_contract',
      value: 2132,
    },
    financialCodeAgent: {
      description: 'description_financial_code_agent',
      name: 'name_financial_code_agent',
      value: 2132,
    },
    financialContractDate: {
      description: 'description_financial_contract_date',
      name: 'name_financial_contract_date',
      value: 2132,
    },
    financialCode: {
      description: 'description_financial_code',
      name: 'name_financial_code',
      value: 2132,
    },
    dateSaleCommunication: {
      description: 'description_date_sale_communication',
      name: 'name_date_sale_communication',
      value: 2132,
    },
    documentBuyer: {
      description: 'description_document_buyer',
      name: 'name_document_buyer',
      value: 2132,
    },
    salesCommunicationNf: {
      description: 'description_sales_communication_nf',
      name: 'name_sales_communication_nf',
      value: 2132,
    },
    nameBuyer: {
      description: 'description_name_buyer',
      name: 'name_name_buyer',
      value: 2132,
    },
    detranProtocol: {
      description: 'description_detran_protocol',
      name: 'name_detran_protocol',
      value: 2132,
    },
    typeBuyer: {
      description: 'description_type_buyer',
      name: 'name_type_buyer',
      value: 2132,
    },
    gravameDate: {
      description: 'description_gravame_date',
      name: 'name_gravame_date',
      value: 2132,
    },
    gravameDocumentFinanced: {
      description: 'description_gravame_document_financed',
      name: 'name_gravame_document_financed',
      value: 2132,
    },
    gravameAgentName: {
      description: 'description_gravame_agent_name',
      name: 'name_gravame_agent_name',
      value: 2132,
    },
    financialContractName: {
      description: 'description_financial_contract_name',
      name: 'name_financial_contract_name',
      value: 2132,
    },
    gravameContactNumber: {
      description: 'description_gravame_contact_number',
      name: 'name_gravame_contact_number',
      value: 2132,
    },
    financedName: {
      description: 'description_financed_name',
      name: 'name_financed_name',
      value: 2132,
    },
    municipalDebt: {
      description: 'description_municipal_debt',
      name: 'name_municipal_debt',
      value: 2132,
    },
    debtFed: {
      description: 'description_debt_fed',
      name: 'name_debt_fed',
      value: 2132,
    },
    licensingIpva: {
      description: 'description_licensing_ipva',
      name: 'name_licensing_ipva',
      value: 2132,
    },
    licensingDate: {
      description: 'description_licensing_date',
      name: 'name_licensing_date',
      value: 2132,
    },
  },
});

describe(AggregateParser.name, () => {
  test('should return null if input is null or undefined', () => {
    const result: Partial<QueryAggregateVo> = AggregateParser.parse(null, null, null);
    expect(result).toBe(null);

    const result2: Partial<QueryAggregateVo> = AggregateParser.parse(undefined, undefined, undefined);
    expect(result2).toBe(null);
  });

  test('should parse input to QueryAggregateVo', () => {
    const aggregate: AggregateVo = mockAggregateVo();
    const result: Partial<QueryAggregateVo> = AggregateParser.parse(aggregate);

    expect(result).toStrictEqual({
      anoFabricacao: aggregate?.manufactureYear?.toString(),
      anoModelo: aggregate?.modelYear?.toString(),
      caixaCambio: aggregate?.exchangeBox,
      capacidadeCarga: aggregate?.loadCapacity,
      capacidadePassageiro: aggregate?.passengerCapacity?.toString(),
      capMaxTracao: aggregate?.maxTractionCapacity,
      categoria: null,
      chassi: aggregate?.chassis,
      cidade: aggregate?.city,
      cilindradas: aggregate?.engineCapacity,
      cmt: aggregate?.maxTractionCapacity,
      codigoCombustivel: aggregate?.fuelCode?.toString(),
      codigoMarca: aggregate?.brandCode?.toString(),
      codigoMarcaModelo: aggregate?.modelBrandCode?.toString(),
      codigoMunicipio: aggregate?.cityCode?.toString(),
      combustivel: aggregate?.fuel,
      corVeiculo: aggregate?.vehicleColor,
      dataEmplacamento: aggregate?.licencePlateDate?.toLocaleString(),
      docFaturado: aggregate?.billingDocument,
      docProprietario: aggregate?.ownerDoc,
      documentoImportadora: aggregate?.importDoc,
      dtAtualizacao: aggregate?.updateDate?.toLocaleString(),
      dtUltimaAtualizacao: aggregate?.lastUpdateDate?.toLocaleString(),
      eixos: aggregate?.axesQuantity?.toString(),
      eixoTraseiroDif: aggregate?.rearAxleDif,
      especieVeiculo: aggregate?.vehicleSpecies,
      familia: aggregate?.family,
      identImportadora: null,
      inspecaoGnv: null,
      limiteRestricaoTrib: null,
      marca: aggregate?.brand,
      marcaModelo: aggregate?.modelBrand,
      modelo: aggregate?.model,
      municipio: aggregate?.city,
      municipioEmplacamento: null,
      nacionalidade: aggregate?.nationality,
      numCarroceria: aggregate?.carBodyNumber,
      numFaturado: aggregate?.billingDocument,
      numMotor: aggregate?.engineNumber,
      numTerceiroEixo: aggregate?.thirdAxisNumber?.toString(),
      pbt: aggregate?.totalGrossWeight?.toString(),
      pesoBrutoTotal: aggregate?.totalGrossWeight?.toString(),
      placa: aggregate?.plate,
      potencia: aggregate?.potency,
      procedencia: aggregate?.origin,
      qtdPax: null,
      registroDi: null,
      renavam: aggregate?.renavam,
      situacaoChassi: aggregate?.chassisSituation,
      situacaoVeiculo: aggregate?.vehicleSituation,
      tipoCarroceria: aggregate?.carBodyType,
      tipoDocFaturado: aggregate?.billingDocumentType,
      tipoDocImportadora: aggregate?.importDocType,
      tipoMontagem: aggregate?.assemblyType,
      tipoVeiculo: aggregate?.vehicleType,
      uf: aggregate?.uf,
      ufFaturado: aggregate?.ufBilled,
      ultimaDataInclusao: aggregate?.lastInclusionDate?.toLocaleString(),
      valorAnunciado: null,
    });
  });

  test('should parse input for all fields null', () => {
    const aggregate: AggregateVo = {
      assemblyType: null,
      axesQuantity: null,
      billingDocument: null,
      billingDocumentType: null,
      brand: null,
      brandCode: null,
      carBodyNumber: null,
      carBodyType: null,
      chassis: null,
      chassisSituation: null,
      city: null,
      cityCode: null,
      engineCapacity: null,
      engineNumber: null,
      exchangeBox: null,
      family: null,
      fuel: null,
      fuelCode: null,
      importDoc: null,
      importDocType: null,
      lastInclusionDate: null,
      lastUpdateDate: null,
      licencePlateDate: null,
      loadCapacity: null,
      manufactureYear: null,
      maxTractionCapacity: null,
      model: null,
      modelBrand: null,
      modelBrandCode: null,
      modelYear: null,
      nationality: null,
      origin: null,
      ownerDoc: null,
      passengerCapacity: null,
      plate: null,
      potency: null,
      rearAxleDif: null,
      renavam: null,
      thirdAxisNumber: null,
      totalGrossWeight: null,
      uf: null,
      ufBilled: null,
      updateDate: null,
      vehicleColor: null,
      vehicleSituation: null,
      vehicleSpecies: null,
      vehicleType: null,
    };

    const result: Partial<QueryAggregateVo> = AggregateParser.parse(aggregate);

    expect(result).toStrictEqual({
      anoFabricacao: null,
      anoModelo: null,
      caixaCambio: null,
      capacidadeCarga: null,
      capacidadePassageiro: undefined,
      capMaxTracao: null,
      categoria: null,
      chassi: null,
      cidade: null,
      cilindradas: null,
      cmt: null,
      codigoCombustivel: undefined,
      codigoMarca: undefined,
      codigoMarcaModelo: undefined,
      codigoMunicipio: undefined,
      combustivel: null,
      corVeiculo: null,
      dataEmplacamento: undefined,
      docFaturado: null,
      docProprietario: null,
      documentoImportadora: null,
      dtAtualizacao: undefined,
      dtUltimaAtualizacao: undefined,
      eixos: null,
      eixoTraseiroDif: null,
      especieVeiculo: null,
      familia: null,
      identImportadora: null,
      inspecaoGnv: null,
      limiteRestricaoTrib: null,
      marca: null,
      marcaModelo: null,
      modelo: null,
      municipio: null,
      municipioEmplacamento: null,
      nacionalidade: null,
      numCarroceria: null,
      numFaturado: null,
      numMotor: null,
      numTerceiroEixo: undefined,
      pbt: undefined,
      pesoBrutoTotal: undefined,
      placa: null,
      potencia: null,
      procedencia: null,
      qtdPax: null,
      registroDi: null,
      renavam: null,
      situacaoChassi: null,
      situacaoVeiculo: null,
      tipoCarroceria: null,
      tipoDocFaturado: null,
      tipoDocImportadora: null,
      tipoMontagem: null,
      tipoVeiculo: null,
      uf: null,
      ufFaturado: null,
      ultimaDataInclusao: undefined,
      valorAnunciado: null,
    });
  });

  test('should parse using natinal base if aggregate not exists', () => {
    const aggregate: AggregateVo = {
      assemblyType: null,
      axesQuantity: null,
      billingDocument: null,
      billingDocumentType: null,
      brand: null,
      brandCode: null,
      carBodyNumber: null,
      carBodyType: null,
      chassis: null,
      chassisSituation: null,
      city: null,
      cityCode: null,
      engineCapacity: null,
      engineNumber: null,
      exchangeBox: null,
      family: null,
      fuel: null,
      fuelCode: null,
      importDoc: null,
      importDocType: null,
      lastInclusionDate: null,
      lastUpdateDate: null,
      licencePlateDate: null,
      loadCapacity: null,
      manufactureYear: null,
      maxTractionCapacity: null,
      model: null,
      modelBrand: null,
      modelBrandCode: null,
      modelYear: null,
      nationality: null,
      origin: null,
      ownerDoc: null,
      passengerCapacity: null,
      plate: null,
      potency: null,
      rearAxleDif: null,
      renavam: null,
      thirdAxisNumber: null,
      totalGrossWeight: null,
      uf: null,
      ufBilled: null,
      updateDate: null,
      vehicleColor: null,
      vehicleSituation: null,
      vehicleSpecies: null,
      vehicleType: null,
    };
    const nationalBase: NationalBaseVo = mockNationalBaseVo();

    const result: Partial<QueryAggregateVo> = AggregateParser.parse(aggregate, nationalBase);

    expect(result).toStrictEqual({
      anoFabricacao: nationalBase.manufactureYear.toString(),
      anoModelo: nationalBase.modelYear.toString(),
      caixaCambio: null,
      capacidadeCarga: null,
      capacidadePassageiro: undefined,
      capMaxTracao: nationalBase.cmt,
      categoria: null,
      chassi: nationalBase.chassis,
      cidade: nationalBase.city,
      cilindradas: null,
      cmt: nationalBase.cmt,
      codigoCombustivel: undefined,
      codigoMarca: undefined,
      codigoMarcaModelo: undefined,
      codigoMunicipio: undefined,
      combustivel: nationalBase.fuel,
      corVeiculo: null,
      dataEmplacamento: undefined,
      docFaturado: nationalBase.docBilled,
      docProprietario: null,
      documentoImportadora: null,
      dtAtualizacao: undefined,
      dtUltimaAtualizacao: undefined,
      eixos: nationalBase.axis,
      eixoTraseiroDif: null,
      especieVeiculo: null,
      familia: null,
      identImportadora: null,
      inspecaoGnv: null,
      limiteRestricaoTrib: null,
      marca: nationalBase.brand,
      marcaModelo: nationalBase.brandModel,
      modelo: nationalBase.model,
      municipio: nationalBase.city,
      municipioEmplacamento: null,
      nacionalidade: null,
      numCarroceria: null,
      numFaturado: null,
      numMotor: nationalBase.engineNumber,
      numTerceiroEixo: undefined,
      pbt: undefined,
      pesoBrutoTotal: undefined,
      placa: nationalBase.plate,
      potencia: null,
      procedencia: null,
      qtdPax: null,
      registroDi: null,
      renavam: nationalBase.renavam,
      situacaoChassi: null,
      situacaoVeiculo: null,
      tipoCarroceria: null,
      tipoDocFaturado: nationalBase.billedDocType,
      tipoDocImportadora: null,
      tipoMontagem: null,
      tipoVeiculo: nationalBase.vehicleType,
      uf: nationalBase.uf,
      ufFaturado: null,
      ultimaDataInclusao: undefined,
      valorAnunciado: null,
    });
  });

  test('should parse using state base if national base and aggregate not exists', () => {
    const aggregate: AggregateVo = {
      assemblyType: null,
      axesQuantity: null,
      billingDocument: null,
      billingDocumentType: null,
      brand: null,
      brandCode: null,
      carBodyNumber: null,
      carBodyType: null,
      chassis: null,
      chassisSituation: null,
      city: null,
      cityCode: null,
      engineCapacity: null,
      engineNumber: null,
      exchangeBox: null,
      family: null,
      fuel: null,
      fuelCode: null,
      importDoc: null,
      importDocType: null,
      lastInclusionDate: null,
      lastUpdateDate: null,
      licencePlateDate: null,
      loadCapacity: null,
      manufactureYear: null,
      maxTractionCapacity: null,
      model: null,
      modelBrand: null,
      modelBrandCode: null,
      modelYear: null,
      nationality: null,
      origin: null,
      ownerDoc: null,
      passengerCapacity: null,
      plate: null,
      potency: null,
      rearAxleDif: null,
      renavam: null,
      thirdAxisNumber: null,
      totalGrossWeight: null,
      uf: null,
      ufBilled: null,
      updateDate: null,
      vehicleColor: null,
      vehicleSituation: null,
      vehicleSpecies: null,
      vehicleType: null,
    };
    const nationalBase: NationalBaseVo = {
      plate: null,
      chassis: null,
      renavam: null,
      engineNumber: null,
      transmissionNumber: null,
      bodyNumber: null,
      bodyType: null,
      rearAxisNumber: null,
      thireAxisNumber: null,
      axis: null,
      enginePower: null,
      modelYear: null,
      manufactureYear: null,
      vehicleSpecie: null,
      vehicleType: null,
      vehicleSituation: null,
      city: null,
      uf: null,
      ufBilled: null,
      billedDocType: null,
      importDocType: null,
      di: null,
      loadCapacity: null,
      cmt: null,
      pbt: null,
      docBilled: null,
      color: null,
      species: null,
      chassisBrandType: null,
      category: null,
      fuel: null,
      ownerDoc: null,
      cylinder: null,
      modelCode: null,
      brand: null,
      model: null,
      provenance: null,
      brandModel: null,
      licensePlateDate: null,
      mountingType: null,
      loadPassengers: null,
      lastUpdateDate: null,
      inclusionRestrictionDate: null,
      dateOfTheLicense: null,
      taxRestrictionDate: null,
      restrictions: null,
    };

    const stateBase: StateBaseVo = mockStateBaseVo();

    const result: Partial<QueryAggregateVo> = AggregateParser.parse(aggregate, nationalBase, stateBase);

    expect(result).toStrictEqual({
      anoFabricacao: stateBase.manufactureYear.toString(),
      anoModelo: stateBase.modelYear.toString(),
      caixaCambio: null,
      capacidadeCarga: null,
      capacidadePassageiro: undefined,
      capMaxTracao: stateBase.cmt,
      categoria: null,
      chassi: stateBase.chassis,
      cidade: stateBase.city,
      cilindradas: null,
      cmt: stateBase.cmt,
      codigoCombustivel: undefined,
      codigoMarca: undefined,
      codigoMarcaModelo: undefined,
      codigoMunicipio: undefined,
      combustivel: stateBase.fuel,
      corVeiculo: null,
      dataEmplacamento: undefined,
      docFaturado: null,
      docProprietario: null,
      documentoImportadora: null,
      dtAtualizacao: undefined,
      dtUltimaAtualizacao: undefined,
      eixos: stateBase.axis,
      eixoTraseiroDif: null,
      especieVeiculo: null,
      familia: null,
      identImportadora: null,
      inspecaoGnv: null,
      limiteRestricaoTrib: null,
      marca: null,
      marcaModelo: stateBase.brandModel,
      modelo: stateBase.model,
      municipio: stateBase.city,
      municipioEmplacamento: null,
      nacionalidade: null,
      numCarroceria: null,
      numFaturado: null,
      numMotor: stateBase.engineNumber,
      numTerceiroEixo: undefined,
      pbt: undefined,
      pesoBrutoTotal: undefined,
      placa: stateBase.plate,
      potencia: null,
      procedencia: null,
      qtdPax: null,
      registroDi: null,
      renavam: stateBase.renavam,
      situacaoChassi: null,
      situacaoVeiculo: null,
      tipoCarroceria: null,
      tipoDocFaturado: null,
      tipoDocImportadora: null,
      tipoMontagem: null,
      tipoVeiculo: stateBase.vehicleType,
      uf: stateBase.uf,
      ufFaturado: null,
      ultimaDataInclusao: undefined,
      valorAnunciado: null,
    });
  });
});
